{"version":3,"sources":["components/jumbotron.js","utils/API.js","components/tableHeader.js","components/tableBody.js","components/table.js","components/pagination.js","components/searchBox.js","components/users.js","utils/paginate.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","style","textAlign","backgroundColor","color","fontWeight","className","marginTop","axios","get","TableHeader","raiseSort","path","sortColumn","props","order","onSort","renderSortIcon","column","this","columns","map","key","onClick","label","Component","TableBody","users","undefined","name","login","picture","location","cell","email","uuid","src","medium","alt","first","last","state","Table","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","Math","ceil","pages","_","range","page","SearchBox","handleSearch","width","borderStyle","borderRadius","borderColor","display","margin","height","marginBottom","type","placeholder","onChange","e","Users","filteredUsers","handleSort","setState","handlePageChange","event","value","target","filteredList","filter","user","Object","values","join","toLowerCase","indexOf","API","then","res","data","results","catch","err","console","log","count","length","searchQuery","items","pageNumber","startIndex","slice","take","paginate","orderBy","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0b896e10.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Jumbotron = () => {\nreturn (\n    <div\n    style={{\n        textAlign: \"center\",\n        backgroundColor: \"black\",\n        color: \"white\",\n        fontWeight: \"bold\"\n    }}\n    className=\"jumbotron\"\n    >\n    <h1 className=\"display-4\">\n        Employee Directory\n        <p className=\"lead\" style={{marginTop: \"5px\"}}>\n        Click on a column heading and it allows you to sort in ascending or descending orders.\n        <br />\n        You can also search by first or last name if you choose.\n        </p>\n    </h1>\n    </div>\n);\n};\n\nexport default Jumbotron;","import axios from \"axios\";\n\n\nexport default {\n\n    getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\n    }\n    \n}","import React, { Component } from \"react\";\n\nclass TableHeader extends Component {\nraiseSort = path => {\n    const sortColumn = { ...this.props.sortColumn };\n    if (sortColumn.path === path)\n    sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\n    else {\n    sortColumn.path = path;\n    sortColumn.order = \"asc\";\n    }\n    this.props.onSort(sortColumn);\n};\n\nrenderSortIcon = column => {\n    const { sortColumn } = this.props;\n    if (column.path !== sortColumn.path) return null;\n    if (sortColumn.order === \"asc\") return <i className=\"fa fa-sort-asc\"></i>;\n    return <i className=\"fa fa-sort-desc\"></i>;\n};\n\nrender() {\n    return (\n    <thead className=\"thead-light\">\n        <tr>\n        {this.props.columns.map(column => (\n            <th\n            className=\"clickable\"\n            key={column.path}\n            onClick={() => this.raiseSort(column.path)}\n            >\n            {column.label} {this.renderSortIcon(column)}\n            </th>\n        ))}\n        </tr>\n    </thead>\n    );\n}\n}\n\nexport default TableHeader;","import React, { Component } from 'react';\n\nclass TableBody extends Component {\n    render() { \n    const {users} = this.props;\n        return ( \n            <tbody>\n            {users[0] !== undefined && users[0].name !== undefined ? (\n            users.map(({ login, picture, name, location, cell, email }) => {\n                return (\n                <tr key={login.uuid}>\n                    <td>\n                    <img src={picture.medium} alt={name.first} />\n                    </td>\n                    <td>\n                    {name.first} {name.last}\n                    </td>\n                    <td>{location.state}</td>\n                    <td>{email}</td>\n                    <td>{cell}</td>\n                </tr>\n                );\n            })\n            ) : (\n            <></>\n            )}\n        </tbody>\n        )\n    }\n}\n\nexport default TableBody;","import React, { Component } from \"react\";\nimport TableHeader from \"./tableHeader\";\nimport TableBody from \"./tableBody\";\n\nclass Table extends Component {\ncolumns = [\n    { path: \"picture.medium\", label: \"Image\" },\n    { path: \"name.first\", label: \"Name\" },\n    { path: \"location.state\", label: \"State\" },\n    { path: \"email\", label: \"Email\" },\n    { path: \"cell\", label: \"Cell Phone\" }\n];\nrender() {\n    const { users, sortColumn, onSort } = this.props;\n    return (\n    <table className=\"table\">\n        <TableHeader\n        columns={this.columns}\n        sortColumn={sortColumn}\n        onSort={onSort}\n        />\n        <TableBody users={users} />\n    </table>\n    );\n}\n}\n\nexport default Table;","import React from \"react\";\nimport _ from \"lodash\";\n\nconst Pagination = props => {\nconst { itemsCount, pageSize, onPageChange, currentPage } = props;\nconst pagesCount = Math.ceil(itemsCount / pageSize);\nif (pagesCount === 1) return null;\nconst pages = _.range(1, pagesCount + 1);\nreturn (\n    <nav>\n    <ul className=\"pagination\">\n        {pages.map(page => (\n        <li key={page} className={page === currentPage ? \"page-item active\" : \"page-item\"}>\n            {/* eslint-disable-next-line  */}\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>{page}</a>\n        </li>\n        ))}\n    </ul>\n    </nav>\n);\n};\n\nexport default Pagination;","import React from \"react\";\n\nconst SearchBox = ({ handleSearch }) => {\nreturn (\n    <input\n    style={{\n        width: \"60%\",\n        borderStyle: \"solid\",\n        borderRadius: \"4px\",\n        borderColor: \"black\",\n        display: \"block\",\n        margin: \"0 auto\",\n        height: \"50px\",\n        marginBottom: \"20px\"\n    }}\n    type=\"text\"\n    name=\"query\"\n    placeholder=\"Search by first or last name...\"\n    onChange={e => handleSearch(e)}\n    />\n);\n};\n\nexport default SearchBox;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Table from \"./table\";\nimport Pagination from \"./pagination\";\nimport SearchBox from \"./searchBox\";\nimport _ from \"lodash\";\nimport { paginate } from \"../utils/paginate\";\n\n\nclass Users extends Component {\nstate = {\n    users: [{}],\n    filteredUsers: [{}],\n    pageSize: 25,\n    currentPage: 1,\n    sortColumn: { path: \"name.first\", order: \"asc\" }\n};\n\ncomponentDidMount() {\n    API.getUsers()\n    .then(res =>\n        this.setState({\n        users: res.data.results,\n        filteredUsers: res.data.results\n        })\n    )\n    .catch(err => console.log(err));\n}\n\nhandleSort = sortColumn => {\n    this.setState({ sortColumn });\n};\n\nhandlePageChange = page => {\n    this.setState({ currentPage: page });\n};\n\nhandleSearch = event => {\n    const value = event.target.value;\n    const filteredList = this.state.users.filter(user => {\n    let newValue = Object.values(user)\n    .join(\"\")\n    .toLowerCase()\n    return newValue.indexOf(value.toLowerCase()) !== -1;\n    })\n\n    this.setState({filteredUsers: filteredList, currentPage: 1})\n}\n\nrender() {\n    const { length: count } = this.state.users;\n    const { filteredUsers, sortColumn, currentPage, pageSize, searchQuery } = this.state;\n    const sorted = _.orderBy(filteredUsers, [sortColumn.path], [sortColumn.order]);\n    const users = paginate(sorted, currentPage, pageSize);\n\n    \n    return (\n    <>\n        <SearchBox value={searchQuery} handleSearch={this.handleSearch}/>\n        <Table users={users} onSort={this.handleSort} sortColumn={sortColumn} />\n        <Pagination\n        itemsCount={count}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onPageChange={this.handlePageChange}\n        />\n    </>\n    );\n}\n}\n\nexport default Users;","import _ from \"lodash\";\n\nexport function paginate(items, pageNumber, pageSize) {\n  const startIndex = (pageNumber - 1) * pageSize;\nreturn _(items)\n    .slice(startIndex)\n    .take(pageSize)\n    .value();\n}","import React from 'react';\nimport './App.css';\nimport Jumbotron from './components/jumbotron';\nimport Users from './components/users';\n\nfunction App() {\n  return (\n    <main className=\"container\">\n    <Jumbotron />\n      <Users />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}